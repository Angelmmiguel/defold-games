local data = require ("main.data")

local DRAG = 0.02
local ACCEL = 0.5
local FALL_MAX = 5
local GRAVITY = 0.2
local SOLID_TILE = 11
local FINISH_TILE = 85
local POWER = 0.2
local MAX_POWER = 11

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#sprite", "play_animation", {id = hash("static")})
	self.correction = vmath.vector3()
	self.move = vmath.vector3(0,0,0)
	self.snap = true
	self.power = 0
	self.onground = 0
	data.lives = 5
	data.state = data.STATE_GETREADY
end

local function move(self)
	local p = go.get_position() + self.move
	go.set_position(p)
	data.playerpos = p

	if self.snap then
		msg.post("view#script", "snap_to", { position = go.get_position()})
		self.snap = false
	else
		msg.post("view#script", "look_at", { position = go.get_position()})
	end
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function dead(self)
	if data.lives == 0 then
		msg.post("#co", "disable")
		self.move = vmath.vector3(0,0,0)
		sprite.set_constant("#sprite", "tint", vmath.vector4(0,0,0,0))
		data.state = data.STATE_GAMEOVER
		msg.post("/common/view#gameover", "show", {})
	else
		data.lives = data.lives - 1
		go.set_position(data.spawnpos)
		self.move = vmath.vector3(0,0,0)
	end
end	

local function hit_spike(self)
	msg.post("main:/sound#crunch", "play_sound")
	dead(self)
end

local function level_clear(self)
	data.state = data.STATE_LEVELCLEAR
	msg.post("main:/sound#clear", "play_sound")
	msg.post("/common/view#levelclear", "show", {})
end

local function checks(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
	if t >= 61 and t <=69 then hit_spike(self)
	elseif t >= FINISH_TILE and self.onground > 0 then level_clear(self) end
	
	if self.onground > 0 then self.onground = self.onground - 1 end
end

local function sound(self)
	local p = go.get_position()
	local v = 1 - (p.y / 800)
	if v < 0 then v = 0 elseif v > 1 then v = 1 end
	msg.post("main:/sound#music", "set_gain", {gain = v / 4})
end

function update(self, dt)
	move(self)
	drag(self)
	sound(self)
	
	if data.state == data.STATE_PLAYING then
		gravity(self)
		checks(self)
	end

	msg.post("view#gui", "power", {power = self.power})
	self.correction = vmath.vector3()
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") and self.onground > 0 then
		if action.released then
			self.move.x = -self.power / 4
			self.move.y = self.power / 1.5
			self.power = 0
			msg.post("#sprite", "play_animation", {id = hash("left_jump")})
			msg.post("main:/sound#jump", "play_sound")
		else
			self.power = self.power + POWER
			msg.post("#sprite", "play_animation", {id = hash("left_squat")})
		end
	elseif action_id == hash("right") and self.onground > 0 then
		if action.released then
			self.move.x = self.power / 4
			self.move.y = self.power / 1.5
			self.power = 0
			msg.post("#sprite", "play_animation", {id = hash("right_jump")})
			msg.post("main:/sound#jump", "play_sound")
		else
			self.power = self.power + POWER
			msg.post("#sprite", "play_animation", {id = hash("right_squat")})
		end
	end

	if self.power > MAX_POWER then self.power = 0 end
	
	--if action_id == hash("debug") and action.pressed then level_clear(self) end

	if action_id == hash("quit") and action.pressed then
		msg.post("main:/sound", "stop_sound", {})
		msg.post("main:/handler", "show_menu")
	end
end

local function input_getready (self, action_id, action)
	if action_id == hash("left") and action.pressed then
		msg.post("view#getready", "hide", {})
		data.state = data.STATE_PLAYING
	end	
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("left") and action.pressed then
		data.state = data.GET_READY
		data.level = data.level + 1
		if data.level < 4 then
			if data.maxlevel < data.level then data.maxlevel = data.level end
			msg.post("game:/loader", "new_level", {})
		else
			data.maxlevel = 1
			msg.post("view#script", "snap_to", { position = data.offset})
			msg.post("main:/handler", "show_menu")
		end
	end	
end

local function input_gameover(self, action_id, action)
	if action_id == hash("left") and action.pressed then
		msg.post("view#script", "snap_to", { position = data.offset})
		msg.post("main:/handler", "show_menu")
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_GETREADY then
		input_getready(self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp

			if message.normal.x > 0 and self.move.x < 0 then self.move.x = 0 
			elseif message.normal.x < 0 and self.move.x > 0 then self.move.x = 0 
			end

			if message.normal.y == 1 then
				self.move.x = 0
				self.move.y = 0
				self.onground = 3
				if self.power == 0 then
					msg.post("#sprite", "play_animation", {id = hash("static")})
				end
			elseif message.normal.y == -1 then
				self.move.x = self.move.x / 1.5
				self.move.y = 0
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("position") then
		go.set_position(message.pos)
	elseif message_id == hash("dead") then
		dead(self)
	elseif message_id == hash("contact_point_response") then
		collision(self, message)
	end
end
