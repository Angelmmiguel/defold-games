local data = require ("main.data")

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(37/255, 26/255, 42/255, 1) } )
	self.total = 0
end

local function getdirections(x, y)
	local dir = {
		{n=0, e=0, s=0, w=0},
		{n=0, e=1, s=0, w=1},
		{n=1, e=0, s=1, w=0},
		{n=0, e=1, s=1, w=0},
		{n=0, e=0, s=1, w=1},
		{n=1, e=0, s=0, w=1},
		{n=1, e=1, s=0, w=0},
		{n=1, e=1, s=0, w=1},
		{n=1, e=1, s=1, w=0},
		{n=0, e=1, s=1, w=1},
		{n=1, e=0, s=1, w=1},
		{n=1, e=1, s=1, w=1}
	}

	local t = tilemap.get_tile("/level#tilemap", "control", x, y)

	if t == 37 then
		tilemap.set_tile("/level#tilemap", "control", x, y, 0)
		msg.post("/common/explosion", "explode", {pos = vmath.vector3(x, y, 0)})
	end

	if t < 0 or t > 16 then t = 0 end

	return dir[t+1]
end

local function addpower(x, y)
	local t = tilemap.get_tile("/level#tilemap", "control", x, y)
	tilemap.set_tile("/level#tilemap", "power", x, y, t+16)
end

local function processpower(x, y)
	local dir = getdirections(x, y)
	local adj = vmath.vector4()

	if dir.n == 1 and y < data.LEVEL_SIZE then
		adj = getdirections(x, y+1)
		if adj.s == 1 then addpower(x, y+1) end
	end
	if dir.e == 1 and x < data.LEVEL_SIZE+2 then
		adj = getdirections(x+1, y)
		if adj.w == 1 then addpower(x+1, y) end
	end
	if dir.s == 1 and y > 1 then
		adj = getdirections(x, y-1)
		if adj.n == 1 then addpower(x, y-1) end
	end
	if dir.w == 1 and x > -1 then
		adj = getdirections(x-1, y)
		if adj.e == 1 then addpower(x-1, y) end
	end
end

local function power()
	for y = 1, data.LEVEL_SIZE do
		for x = -1, data.LEVEL_SIZE+2 do
			local t = tilemap.get_tile("#tilemap", "power", x, y)
			if t > 0 then
				processpower(x, y)
			end
		end
	end
end

local function check(self)
	local count = 0
	
	for y = 1, data.LEVEL_SIZE do
		for x = -1, data.LEVEL_SIZE+2 do
			local t = tilemap.get_tile("/level#tilemap", "power", x, y)
			local b = tilemap.get_tile("/level#tilemap", "top", x, y)
			if b == 38 and t > 0 then
				tilemap.set_tile("/level#tilemap", "top", x, y, 39)
			elseif b == 39 then
				if t == 0 then
					tilemap.set_tile("/level#tilemap", "top", x, y, 38)
				else
					count = count + 1
					if count == self.total then
						data.state = data.STATE_LEVELCLEAR
						msg.post("main:/sound#clear", "play_sound")
						msg.post("/common/gui#levelclear", "show")
					end
				end
			end
		end
	end
end

function update(self, dt)
	if data.state == data.STATE_PLAYING then
		power()
		check(self)
	end
end

local function parsetile(x,y)
	local w = tilemap.get_tile("#tilemap", "world", x, y)
	if w > 33 then
		local t = tilemap.get_tile("#tilemap", "control", x, y)
		if t == 0 then
			tilemap.set_tile("#tilemap", "control", x, y, math.random(1,6))
		elseif t >= 1 and t <= 16 then
			local r = math.random(1,3)
			for n = 1, r do
				tilemap.set_tile("#tilemap", "control", x, y, data.swaptile(t))
				t = tilemap.get_tile("#tilemap", "control", x, y)
			end
		end
	end
end

local function createspark(self, x, y)
	local t = tilemap.get_tile("#tilemap", "top", x, y)
	if t == 40 then
		tilemap.set_tile("#tilemap", "power", x, y, 17)
	end

	t = tilemap.get_tile("#tilemap", "top", x, y)
	if t == 38 then
		self.total = self.total + 1
	end
end

local function parse(self)
	for y = 1, data.LEVEL_SIZE do
		for x = -1, data.LEVEL_SIZE+2 do
			createspark(self, x, y)
			if x >= 1 and x <= data.LEVEL_SIZE then parsetile(x, y) end
		end
	end
end

local function newlevel(self)
	for y = 1, data.LEVEL_SIZE do
		for x = -1, data.LEVEL_SIZE+2 do
			local sx = x + ((data.level-1) * (data.LEVEL_SIZE+4))
			local sy = y + 11

			local w = tilemap.get_tile("/level#tilemap", "world", sx, sy)
			local c = tilemap.get_tile("/level#tilemap", "control", sx, sy)
			local t = tilemap.get_tile("/level#tilemap", "top", sx, sy)

			tilemap.set_tile("/level#tilemap", "world", x, y, w)
			tilemap.set_tile("/level#tilemap", "control", x, y, c)
			tilemap.set_tile("/level#tilemap", "top", x, y, t)
		end
	end
	self.total = 0
	parse(self)
	msg.post("/common/gui#game", "newlevel")
end

local function clearpower()
	for y = 1, data.LEVEL_SIZE do
		for x = -1, data.LEVEL_SIZE+2 do
			local t = tilemap.get_tile("/level#tilemap", "top", x, y)
			if t ~= 40 then
				tilemap.set_tile("/level#tilemap", "power", x, y, 0)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("newlevel") then 
		newlevel(self)
		clearpower()
	elseif message_id == hash("clear") then clearpower()
	end
end
