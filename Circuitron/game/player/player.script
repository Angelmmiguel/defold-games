local data = require ("main.data")

function init(self)
	msg.post(".", "acquire_input_focus")
	data.state = data.STATE_GETREADY
	self.vol = 0
	msg.post("/level#script", "newlevel")
	if data.music then msg.post("main:/sound#music", "play_sound", {gain = 0}) end
end

function update(self, dt)
	if self.vol < 0.9 then self.vol = self.vol + 0.001 end
	msg.post("main:/sound#music", "set_gain", {gain = self.vol})
	if data.state ~= data.STATE_PLAYING then go.set_position(vmath.vector3(0,-32,0)) end
end

local function validtile(pos)
	local v = false
	if pos.x >= 1 and pos.x <= data.LEVEL_SIZE and pos.y >=1 and pos.y <= data.LEVEL_SIZE then
		v = true
	end
	return v
end

local function lock(pos)
	pos = pos + data.offset
	pos = data.world2tile(pos)

	if validtile(pos) then
		pos = data.tile2world(pos)
	else
		pos = vmath.vector3(0,-32,0)
	end
		
	return pos
end

local function clicktile(self, pos)
	pos = pos + data.offset
	pos = data.world2tile(pos)

	if validtile(pos) then
		local w = tilemap.get_tile("/level#tilemap", "world", pos.x, pos.y)
		if w > 33 then
			local t = tilemap.get_tile("/level#tilemap", "control", pos.x, pos.y)
			if t >= 1 and t <= 16 then
				t = data.swaptile(t)
				tilemap.set_tile("/level#tilemap", "control", pos.x, pos.y, t)
				msg.post("main:/sound#switch", "play_sound", {gain = 1.0})
				msg.post("/level#script", "clear")
			end
		end
	end
end

local function input_playing(self, action_id, action)
	local pos = vmath.vector3(action.x / data.PIXEL_SIZE, action.y / data.PIXEL_SIZE, 1)
	go.set_position(lock(pos))
	if action_id == hash("click") and action.pressed then
		clicktile(self, pos)
		msg.post("gui#game", "input", {action_id = action_id, action = action})
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif action_id == hash("click" ) and action.pressed then
		if data.state == data.STATE_GETREADY then
			msg.post("gui#getready", "input", {action_id = action_id, action = action})
		elseif data.state == data.STATE_LEVELCLEAR then
			msg.post("gui#levelclear", "input", {action_id = action_id, action = action})
		elseif data.state == data.STATE_GAMEOVER then
			msg.post("gui#gameover", "input", {action_id = action_id, action = action})
		elseif data.state == data.STATE_OPTIONS then
			msg.post("gui#options", "input", {action_id = action_id, action = action})
		end
	end
end

function on_message(self, message_id, message, sender)
end
