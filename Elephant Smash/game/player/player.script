local data = require ("main.data")

local DRAG = 0.5
local ACCEL = 1
local SPEED_MAX = 3
local FALL_MAX = 3.5
local OFFSET = 64
local GRAVITY = 0.5
local JUMP = 6
local GROUND = 8
local INVINCIBLE = 150

local function reset(self)
	msg.post("#sprite", "play_animation", {id = hash("static")})
	msg.post("#co", "enable")
	self.inv = INVINCIBLE
end
	
function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.move = vmath.vector3(0,0,0)
	self.onground = true
	self.anim = false
	self.lives = 4
	self.level = 1
	self.cheese = 0
	self.timer = 0
	data.state = data.STATE_PLAYING
	go.set_position(data.spawnpos)
	reset(self)
end

local function move(self)
	local p = go.get_position() + self.move
	if p.y <= GROUND then
		self.onground = true
		self.move.y = 0
		p.y = GROUND
	end

	if p.x < 8 then p.x = 8
	elseif p.x > 312 then p.x = 312
	end
	
	go.set_position(p)
	data.playerpos = p
end

local function drag(self)
	if self.move.x > 0 then self.move.x = self.move.x - DRAG
		if self.move.x < 0 then self.move.x = 0 end
	elseif self.move.x < 0 then self.move.x = self.move.x + DRAG
		if self.move.x > 0 then self.move.x = 0 end
	end
end

local function gravity(self)
	self.move.y = self.move.y - GRAVITY
	if self.move.y < -FALL_MAX then self.move.y = -FALL_MAX end
end

local function animate(self)
	if self.move.x ~=0 and self.anim == false then
		self.anim = true
		msg.post("#sprite", "play_animation", {id = hash("anim")})
	elseif self.move.x == 0 and self.anim == true then
		self.anim = false
		msg.post("#sprite", "play_animation", {id = hash("static")})
	end

	if self.move.x < 0 then sprite.set_hflip("#sprite", true)
	elseif self.move.x > 0 then sprite.set_hflip("#sprite", false)
	end	
end

local function dead(self)
	msg.post("#sprite", "play_animation", {id = hash("flat")})
	msg.post("main:/sound#splat", "play_sound")
	msg.post("#co", "disable")
	
	self.move = vmath.vector3(0,0,0)

	if self.lives == 0 then
		self.timer = 120
		data.state = data.STATE_GAMEOVER
		msg.post("view#gameover", "show", {})
	else
		self.lives = self.lives - 1
		data.state = data.STATE_DEAD
	end
end	

local function levelclear(self)
	self.level = self.level + 1
	self.cheese = 0
	self.inv = INVINCIBLE
	msg.post("main:/sound#clear", "play_sound")
	msg.post("/level#script", "make", {level = self.level})
	reset(self)
end

local function spike(self)
	particlefx.play("#pfx")
	dead(self)
end

local function cheese(self, pos)
	tilemap.set_tile("/level#tilemap", "main", pos.x, 1, 0)
	self.cheese = self.cheese + 1
	msg.post("main:/sound#pickup", "play_sound")

	if self.cheese >= 10 then levelclear(self)
	else msg.post("/level#script", "cheese", {mask = pos.x})
	end
end

local function checks(self)
	local pos = data.world2tile(go.get_position() - vmath.vector3(-8,0,0))
	local t = tilemap.get_tile("/level#tilemap", "main", pos.x, pos.y)
	if t == 2 then cheese(self, pos) end
	if self.inv > 0 then
		msg.post("#co", "disable")
		self.inv = self.inv - 1
		if self.inv == 0 then 	msg.post("#co", "enable")
		end
		if self.inv%2 == 0 then sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,1))
		else sprite.set_constant("#sprite", "tint", vmath.vector4(1,1,1,0.2))
		end
		return
	end
	if t == 1 then spike(self) end
end

function update(self, dt)
	move(self)
	drag(self)
	gravity(self)

	if data.state == data.STATE_PLAYING then
		animate(self)
		checks(self)
	end

	msg.post("view#gui", "update", {lives = self.lives, cheese = self.cheese, level = self.level})
	
	self.correction = vmath.vector3()
	data.level = self.level
	self.timer = self.timer - 1
end

local function jump(self)
	self.move.y = JUMP
	self.onground = false
	msg.post("main:/sound#jump", "play_sound")
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.move.x = self.move.x - ACCEL
		if self.move.x < -SPEED_MAX then self.move.x = -SPEED_MAX end
	elseif action_id == hash("right") then
		self.move.x = self.move.x + ACCEL
		if self.move.x > SPEED_MAX then self.move.x = SPEED_MAX end
	end

	if action_id == hash("jump") and action.pressed and self.onground then
		jump(self)
	end
end

local function input_dead(self, action_id, action)
	if action_id == hash("jump") and action.pressed then
		reset(self)
		data.state = data.STATE_PLAYING
	end
end

local function input_gameover(self, action_id, action)
	if action_id == hash("jump") and action.pressed and self.timer < 0 then
		msg.post("main:/handler", "show_menu")
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_DEAD then
		input_dead(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER then
		input_gameover(self, action_id, action)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		dead(self)
	end
end
